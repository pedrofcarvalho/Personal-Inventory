            @Override
            public void initialize(URL location, ResourceBundle resources)
            {
                // table is editable
                itemTable.setEditable(true);
                itemTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

                // set the cell value for name column
                nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
                nameCol.setCellFactory(TextFieldTableCell.forTableColumn());
                nameCol.setOnEditCommit(event ->
                {
                    Item editItem = event.getRowValue();
                    editItem.setName(event.getNewValue());
                });

                // set the cell value for serial number column
                serialNumCol.setCellValueFactory(new PropertyValueFactory<>("serialNum"));
                serialNumCol.setCellFactory(TextFieldTableCell.forTableColumn());
                serialNumCol.setOnEditCommit(event ->
                {
                    Item editItem = event.getRowValue();
                    editItem.setSerialNum(event.getNewValue());
                });

                // set the cell value for money value column
                dolValCol.setCellValueFactory(new PropertyValueFactory<>("moneyValue"));
                dolValCol.setCellFactory(TextFieldTableCell.forTableColumn());
                dolValCol.setOnEditCommit(event ->
                {
                    Item editItem = event.getRowValue();
                    editItem.setMoneyValue(event.getNewValue());
                });

                // creates filtered data, which enables the filters from the table and the search bar to work
                FilteredList<Item> filteredData = new FilteredList<>(inventoryList.getItemList(), b -> true);
                searchBar.textProperty().addListener((observable, oldValue, newValue) ->
                {
                    filteredData.setPredicate(employee ->
                    {
                        // If filter text is empty, display all persons.
                        if (newValue == null || newValue.isEmpty()) {
                            return true;
                        }

                        // Compare first name and last name of every person with filter text.
                        String lowerCaseFilter = newValue.toLowerCase();

                        if (employee.getName().toLowerCase().contains(lowerCaseFilter)) {
                            return true; // Filter matches first name.
                        }

                        else if (employee.getSerialNum().toLowerCase().contains(lowerCaseFilter))
                        {
                            return true; // Filter matches last name.
                        }
                        else if (String.valueOf(employee.getMoneyValue()).contains(lowerCaseFilter))
                            return true;

                        else
                            return false; // Does not match.
                    });
                });

                // 3. Wrap the FilteredList in a SortedList.
                SortedList<Item> sortedData = new SortedList<>(filteredData);

                // 4. Bind the SortedList comparator to the TableView comparator.
                // 	  Otherwise, sorting the TableView would have no effect.
                sortedData.comparatorProperty().bind(itemTable.comparatorProperty());

                // 5. Add sorted (and filtered) data to the table.
                itemTable.setItems(sortedData);
            }







        // REMOVE!! - TODO
        searchBar.setText("Pedro");
        inventoryList.addNewItemToList("Pedro", "HSJDLIEOSU", 23.69);
        inventoryList.addNewItemToList(null, null, 0);